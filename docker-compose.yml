version: "3.3"

services:

  Load_Balancer:
    image: nginx:1.21.6-alpine
    restart: always
    container_name: load_balancer
    ports:
      - "8080:80"
    volumes:
      - ./servers/config/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - frontend
    
  web_server_1:
    image: nginx:1.21.6-alpine
    restart: always
    container_name: node_1
    volumes:
      - ./servers/frontend/indexa.html:/usr/share/nginx/html/index.html
    networks:
      - frontend
      - backend

  web_server_2:
    image: nginx:1.21.6-alpine
    restart: always
    container_name: node_2
    volumes:
      - ./servers/frontend/indexb.html:/usr/share/nginx/html/index.html
    networks:
      - frontend
      - backend

  postgresql_master:
    image: postgres:14.2-alpine
    restart: always
    container_name: master_db
    volumes:
      - ./databases/postgres:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=angelos
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=app
    networks:
      - postgres
  
  postgresql_job_listings:
    image: postgres:14.2-alpine
    restart: always
    container_name: jobs_db
    volumes:
      - ./databases/postgres:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=angelos
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=app
    networks:
      - auth
      - read
      - write
      - postgres

  postgresql_customers_A-M:
      image: postgres:14.2-alpine
      restart: always
      container_name: customers_db_M
      volumes:
        - ./databases/postgres:/docker-entrypoint-initdb.d
      environment:
        - POSTGRES_USER=angelos
        - POSTGRES_PASSWORD=example
        - POSTGRES_DB=app
      networks:
        - auth
        - read
        - write
        - postgres

  postgresql_customers_N-Z:
      image: postgres:14.2-alpine
      restart: always
      container_name: customers_db_Z
      volumes:
        - ./databases/postgres:/docker-entrypoint-initdb.d
      environment:
        - POSTGRES_USER=angelos
        - POSTGRES_PASSWORD=example
        - POSTGRES_DB=app
      networks:
        - auth
        - read
        - write
        - postgres

  cache_database:
    image: redis
    container_name: rdb
    ports: 
      - 6379:6379
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL    
    networks:
      - read

  auth_database:
    image: mongo:5.0.6-focal
    restart: always
    container_name: mdb
    ports:
      - 27017:27017    
    volumes:
      - ./databases/mongo:/docker-entrypoint-initdb.d
    environment:
      MONGO_INITDB_ROOT_USERNAME: angelos
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: authDB
    networks:
      - auth

  # These are here just for testing, we shall make our own images for the APIs and push them to dockerhub.
  read_API:
    image: node:16-alpine
    container_name: read_API
    networks:
      - read
      - backend

  write_API:
    image: node:16-alpine
    container_name: write_API
    networks:
      - write
      - backend
      
  auth_API:
    image: node:16-alpine
    container_name: auth_API
    networks:
      - auth
      - backend

networks:
  read:
  write:
  auth:
  postgres:
  backend:
  frontend:
